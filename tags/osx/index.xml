<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>OSX - 标签 - JonnyHub Blog - A Java Programmer.</title><link>https://jonnyhub.gitee.io/tags/osx/</link><description>OSX - 标签 - JonnyHub Blog - A Java Programmer.</description><generator>Hugo -- gohugo.io</generator><managingEditor>jonny0624@gmail.com (Jonny.Chang)</managingEditor><webMaster>jonny0624@gmail.com (Jonny.Chang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 08 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://jonnyhub.gitee.io/tags/osx/" rel="self" type="application/rss+xml"/><item><title>关于 Unix 中的配置文件</title><link>https://jonnyhub.gitee.io/2020/08/2020-06-08-%E5%85%B3%E4%BA%8Eunix%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://jonnyhub.gitee.io/2020/08/2020-06-08-%E5%85%B3%E4%BA%8Eunix%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description><![CDATA[<blockquote>
<p>关于 Unix ，配置文件十分重要，对于用户来说，总是会搞不清，到底要设置哪里。下面就针对不同系统的文件做详细介绍。</p>
</blockquote>
<hr>
<h1 id="关于-unix-中的配置文件">关于 Unix 中的配置文件</h1>
<h2 id="linux-shell-种类简单介绍">Linux Shell 种类简单介绍</h2>
<p>Unix shell，一种壳层与命令行界面，是Unix操作系统下传统的用户和计算机的交互界面。</p>
<ul>
<li>查看本机 shell 有哪些，可以使用命令： <code>cat /etc/shells</code></li>
<li>查看当前用户正在使用的 shell 可以使用命令： <code>echo $SHELL # 切换 shell 为 zsh</code></li>
<li>切换当前用户的 shell 可以使用命令： <code>chsh -s /bin/zsh # 切换 shell 为 zsh</code></li>
</ul>
<h2 id="linux-的变量种类">Linux 的变量种类</h2>
<h3 id="按变量的生存周期划分">按变量的生存周期划分</h3>
<ul>
<li><strong>永久的：</strong> 需要修改配置文件，变量永久生效。</li>
<li><strong>临时的：</strong> 使用 <code>export</code> 命令声明即可，变量在关闭 shell 时失效。</li>
<li>在配置永久的环境变量时，又可以按照作用范围分为: <strong>用户环境变量</strong> &amp; <strong>系统环境变量</strong>。</li>
</ul>
<h2 id="设置环境变量">设置环境变量</h2>
<ol>
<li>
<p>在 shell 的命令行下直接使用 <code>[export 变量名=变量值]</code> 定义变量。该变量只在当前的 shell(bash) 或其子 shell(bash) 下是有效的，shell 关闭了，变量也就失效了，再打开新 shell 时就没有这个变量，需要使用的话还需要重新定义。</p>
</li>
<li>
<p>修改系统环境变量。系统环境变量一般保存在以下几个位置：</p>
<ul>
<li><code>/etc/profile</code> : 全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</li>
<li><code>/etc/bash.bashrc</code> : 它也是全局（公有）的 bash执行时，不管是何种方式，都会读取此文件。</li>
<li><code>/etc/environment</code> : 不要轻易修改此文件。</li>
</ul>
</li>
<li>
<p>修改用户环境变量。用户环境变量一般保存在以下几个位置：</p>
<ul>
<li><code>~/.profile</code></li>
<li><code>~/.bash_profile</code> 或者 <code>~./bash_login</code></li>
<li><code>~/.bashrc</code> : 推荐放置个人设置。</li>
<li><code>~/.bash_profile</code></li>
</ul>
</li>
<li>
<p>Linux 配置环境变量的几个文件的加载顺序：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"> /etc/profile -&gt; <span class="o">(</span>~/.bash_profile <span class="p">|</span> ~/.bash_login <span class="p">|</span> ~/.profile<span class="o">)</span> -&gt; ~/.bashrc -&gt; /etc/bashrc -&gt; ~/.bash_logout
</code></pre></td></tr></table>
</div>
</div><p><strong>说明：</strong></p>
<ul>
<li>若bash是以login方式执行时，读取~/.bash_profile，若它不存在，则读取~/.bash_login，若前两者不存在，读取~/.profile。</li>
<li>若bash是以login方式执行时，读取~/.bash_profile，若它不存,则读取~/.bash_login，若前两者不存在，读取 ~/.profile。只有bash是以login形式执行时，才会读取.bash_profile，Unbutu默认没有此文件，可新建。 通常该配置文件还会配置成去读取~/.bashrc。</li>
<li>当bash是以non-login形式执行时，读取此文件。若是以login形式执行，则不会读取此文件。</li>
<li>~/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。</li>
</ul>
</li>
</ol>
<p><a href="https://img-blog.csdn.net/20180614131117463?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZmVuNDIzNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener noreffer">读取流程图</a></p>
<h2 id="bashrc-和-bash_profile-的区别"><code>.bashrc</code> 和 <code>.bash_profile</code> 的区别</h2>
<p><code>.bash_profile</code>会用在登陆 shell， <code>.bashrc</code> 使用在交互式非登陆 shell 。
简单说来，它们的区别主要是: <code>.bash_profile</code>是在你每次登录的时候执行的；<code>.bashrc</code>是在你新开了一个命令行窗口时执行的。
当通过控制台进行登录（输入用户名和密码）：在初始化命令行提示符的时候会执行<code>.bash_profile</code> 来配置你的 shell 环境。但是如果已经登录到机器，在Gnome或者是KDE也开了一个新的终端窗口（xterm），这时，<code>.bashrc</code>会在窗口命令行提示符出现前被执行。当你在终端敲入<code>/bin/bash</code>时<code>.bashrc</code>也会在这个新的 bash 实例启动的时候执行。</p>
<h2 id="zshrc-文件是什么"><code>.zshrc</code> 文件是什么</h2>
<p>对于使用 zsh shell 的用户来说，<code>.zshrc</code> 文件就相当于以上所讲的  <code>~/.bashrc</code> 和 <code>.bash_profile</code>。</p>]]></description></item></channel></rss>