<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux - 分类 - JonnyHub Blog - A Java Programmer.</title>
        <link>https://jonnyhub.gitee.io/categories/linux/</link>
        <description>Linux - 分类 - JonnyHub Blog - A Java Programmer.</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>jonny0624@gmail.com (Jonny.Chang)</managingEditor>
            <webMaster>jonny0624@gmail.com (Jonny.Chang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 20 Aug 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jonnyhub.gitee.io/categories/linux/" rel="self" type="application/rss+xml" /><item>
    <title>ZSH 插件介绍</title>
    <link>https://jonnyhub.gitee.io/2020/08/2020-08-20-zsh-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Thu, 20 Aug 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://jonnyhub.gitee.io/2020/08/2020-08-20-zsh-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[<p>ZSH 插件的介绍和一些基本配置。</p>
<h1 id="zsh-插件介绍">ZSH 插件介绍</h1>
<h2 id="常用插件介绍">常用插件介绍</h2>
<ul>
<li>
<p>alias-finder : 查找某个完整命令的alias。</p>
<ul>
<li>alias-finder &ldquo;git pull&rdquo;</li>
</ul>
</li>
<li>
<p>git : Oh-My-ZSH 默认开启，它支持 Git 别名、标签补全以及所有 Git 命令的描述。</p>
<ul>
<li><code>git + tab</code></li>
</ul>
</li>
<li>
<p>node : 在浏览器打开当前版本的 Node.js API。</p>
<ul>
<li><code>node-docs http</code></li>
</ul>
</li>
<li>
<p>npm : 给 npm 添加自动补全，显示所有的 npm 命令。</p>
<ul>
<li><code>npm + tab</code></li>
</ul>
</li>
<li>
<p>yarn : 给 yarn 添加自动补全，显示所有的 yarn 命令。</p>
<ul>
<li><code>yarn + tab</code></li>
</ul>
</li>
<li>
<p>yum : 给 yum 添加自动补全，显示所有的 yum 命令。</p>
<ul>
<li><code>yum + tab</code></li>
</ul>
</li>
<li>
<p>bower : 给 Bower 命令添加自动补全。</p>
<ul>
<li><code>bower + tab</code></li>
</ul>
</li>
<li>
<p>brew : 给所有 Brew 命令添加自动补全和描述。</p>
<ul>
<li><code>brew + tab</code></li>
</ul>
</li>
<li>
<p>osx : 支持在终端上使用很多 Finder 命令，<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/osx#commands" target="_blank" rel="noopener noreffer">查看详情</a>。</p>
</li>
<li>
<p>z.lua: 命令行目录跳转工具，性能优于z和autojump。<a href="https://github.com/skywind3000/z.lua/blob/master/README.cn.md#install" target="_blank" rel="noopener noreffer">安装方法</a></p>
</li>
<li>
<p>battery : 电池插件-此插件添加了一些函数，可用于在自定义主题中显示电池信息。
<code>.zshrc: --&gt; RPROMPT='$(battery_pct_prompt) ...'</code></p>
</li>
<li>
<p>bbedit : BBEdit 插件，Mac OS X 的 HTML 和文本编辑器</p>
</li>
<li>
<p>branch : 快速显示当前 Git 或 Mercurial 分支。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">- <span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;${ret_status}%{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}&#39;</span>
+ <span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;${ret_status}%{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)$(branch_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}&#39;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>colored-man-pages : 高亮显示 man 命令内容。</p>
</li>
<li>
<p>colorize : 有了这个插件，你可以语法突出显示文件内容超过300种支持的语言和其他文本格式。</p>
</li>
<li>
<p>command-not-found : 此插件在找不到命令时提供要安装的建议包。</p>
</li>
<li>
<p>common-aliases : 常用的alias。</p>
</li>
<li>
<p>dash : 为Dash添加命令行功能，一个用于macOS的API文档浏览器。此插件需要安装 Dash 才能工作。</p>
<ul>
<li><code>dash golang  /  dash python:tuple</code></li>
</ul>
</li>
<li>
<p>docker-compose : 给 docker-compose 添加自动补全，显示所有的 docker-compose 命令，提供一些 docker-compose 命令的别名。具体<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/docker-compose#aliases" target="_blank" rel="noopener noreffer">参考这里</a></p>
</li>
<li>
<p>docker : 给 docker 添加自动补全，显示所有的 docker 命令，提供一些 docker 命令的别名。</p>
</li>
<li>
<p>emoji : 支持在 Zsh 中方便地使用 Unicode 表情符号。</p>
<ul>
<li><code>echo $emoji[mouse_face]  /  random_emoji</code></li>
</ul>
</li>
<li>
<p>extract : 用于提取您传递的存档文件，它支持各种存档文件类型。</p>
<ul>
<li><code>extract xxx.tar.gz</code></li>
</ul>
</li>
<li>
<p>fancy-ctrl-z : 使用 Ctrl-Z 切换回 Vim。</p>
</li>
<li>
<p>forklift : OS X 的 FTP 应用程序。</p>
<ul>
<li><code>fl [&lt;file_or_folder&gt;]</code></li>
</ul>
</li>
<li>
<p>fzf : fzf 是一个通用命令行模糊查找器。（ 需要安装 fzf： brew install fzf ）</p>
<ul>
<li>配置： <code>export FZF_BASE=/path/to/fzf/install/dir</code></li>
</ul>
</li>
<li>
<p>git-auto-fetch : 在 git 初始化目录中工作时，自动从所有远程获取所有更改。</p>
<ul>
<li>间隔时间配置： <code>GIT_AUTO_FETCH_INTERVAL=1200</code></li>
</ul>
</li>
<li>
<p>git-prompt : 显示有关当前 git 存储库的信息的提示。</p>
</li>
<li>
<p>gitfast : 此插件使用 git.git 人员的 zsh 完成，这比 zsh 的官方完成速度要快得多。</p>
</li>
<li>
<p>github : github 插件。</p>
<ul>
<li>配置环境变量 : <code>$GITHUB_USER  /  $GITHUB_PASSWORD</code></li>
<li>Git 配置选项 : <code>github.user</code> - 用于存储库操作的 GitHub 用户名</li>
<li>用法 : <code>man hub</code></li>
</ul>
</li>
<li>
<p>gitignore : 此插件使您能够使用命令gitignore.io命令行的一个应用程序。</p>
<ul>
<li>查看 : <code>gi list</code></li>
<li>使用 : <code>gi java</code></li>
</ul>
</li>
<li>
<p>golang : 此插件添加了 Go 编程语言的完成，以及常见 Golang 命令的一些别名。</p>
<ul>
<li>具体别名与使用方法<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/golang#aliases" target="_blank" rel="noopener noreffer">查看这里</a></li>
</ul>
</li>
<li>
<p>gradle : 增加了自动完成和别名的 gradle 。</p>
</li>
<li>
<p>gulp : 自动完成 gulp 。</p>
</li>
<li>
<p>history : 提供了几个方便的别名，用于使用 命令来检查命令行历史记录。
用法1： <code>h : history</code> 打印命令历史记录 ；
用法2： <code>hs : history | grep</code> 使用 grep 搜索命令历史记录 ；
用法3： <code>hsi : history | grep -i</code> 使用 grep 对命令历史记录进行不区分大小写搜索 。</p>
</li>
<li>
<p>iterm2 : Iterm2 插件。</p>
</li>
<li>
<p>jenv : 类似于 rbenv 和pyenv的Java 版本管理器。</p>
</li>
<li>
<p>jsontools : 用于处理 json 数据的方便的命令行工具。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">pp_json： 漂亮的打印 json 。如： curl https://coderwall.com/bobwilliams.json <span class="p">|</span> pp_json
is_json： 如果有效 json， 返回 true<span class="p">;</span>假， 否则。
urlencode_json： 返回给定 json 的 URL 编码字符串。
urldecode_json： 返回给定 URL 编码字符串的解码 json。
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>rvm : rvm 别名和自动完成插件 - Ruby 版本管理器：<a href="https://rvm.io/">https://rvm.io/</a>。</p>
</li>
<li>
<p>mvn : mvn 别名和自动完成插件。</p>
</li>
<li>
<p>nvm : nvm 别名和自动完成插件。</p>
</li>
<li>
<p>npm : npm 别名和自动完成插件。</p>
</li>
<li>
<p>npx : npx 别名和自动完成插件。</p>
</li>
<li>
<p>pip : pip 别名和自动完成插件。</p>
</li>
<li>
<p>pipenv : 此插件提供了一些功能，以简化使用 Pipenv。</p>
</li>
<li>
<p>pyenv : 这个插件寻找pyenv，一个简单的Python版本管理系统。</p>
</li>
<li>
<p>python : 该插件为有用的 python 命令添加了多个别名。</p>
</li>
<li>
<p>rails : 此插件添加了Ruby On Rails 框架和 Rake命令的完成，以及日志和环境变量的一些别名。</p>
</li>
<li>
<p>rbenv : 这个插件的主要工作是提供可以添加到您的主题，包括Ruby版本和宝石集信息到您的提示。</p>
</li>
<li>
<p>redis-cli : 此插件添加 redis-cli 完成，基于 Homebrew 完成。</p>
</li>
<li>
<p>shell-proxy : 命令行代理工具，具体使用<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/shell-proxy#usage" target="_blank" rel="noopener noreffer">参考这里</a>。</p>
</li>
<li>
<p>spring : Spring Boot oh-my-zsh 插件。</p>
</li>
<li>
<p>systemd : systemctl 插件。<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/systemd#aliases" target="_blank" rel="noopener noreffer">参考</a></p>
</li>
<li>
<p>sudo : 按两次 ESC 自动在命令行前加 sudo 。</p>
</li>
<li>
<p>textastic : Textastic 插件 Mac OS X。</p>
</li>
<li>
<p>themes : 这个插件允许您更改ZSH主题。</p>
<ul>
<li>使用1： <code>theme &lt;theme_name&gt;</code> - 将 ZSH 主题更改为指定主题。</li>
<li>使用2： <code>theme</code> - 将 ZSH 主题更改为一些随机主题。</li>
<li>使用3： <code>lstheme</code> - 列出已安装的 ZSH 主题。</li>
</ul>
</li>
<li>
<p>timer : 显示命令的执行时间。</p>
</li>
<li>
<p>ubuntu : Ubuntu 自动完成和alias。</p>
</li>
<li>
<p>ufw : 这个插件增加了用于管理每个人最喜欢的简单防火墙（UFW）的完成，这是一个管理iptable的简单界面。</p>
</li>
<li>
<p>urltools : 此插件提供两个别名到 URL 编码和 URL 解码字符串。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">urlencode <span class="s1">&#39;https://github.com/ohmyzsh/ohmyzsh/search?q=urltools&amp;type=Code&#39;</span>
<span class="c1"># returns https%3A%2F%2Fgithub.com%2Fohmyzsh%2Fohmyzsh%2Fsearch%3Fq%3Durltools%26type%3DCode</span>
urldecode <span class="s1">&#39;https%3A%2F%2Fgithub.com%2Fohmyzsh%2Fohmyzsh%2Fsearch%3Fq%3Durltools%26type%3DCode&#39;</span>
<span class="c1"># returns https://github.com/ohmyzsh/ohmyzsh/search?q=urltools&amp;type=Code</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>vscode : 此插件提供了有用的别名，以简化命令行与 VS 代码或 VSCodium 编辑器之间的交互。</p>
</li>
<li>
<p>web-search : 这个插件增加了搜索谷歌，维基，必应，YouTube和其他流行的服务的别名。</p>
<ul>
<li>使用 : <code>google oh-my-zsh</code> <code>bing content</code></li>
</ul>
</li>
<li>
<p>zsh-navigation-tools : Zsh 导航工具。</p>
<ul>
<li>配置： <a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zsh-navigation-tools#configuration">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zsh-navigation-tools#configuration</a></li>
<li>使用： <a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zsh-navigation-tools#introduction">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zsh-navigation-tools#introduction</a></li>
</ul>
</li>
</ul>
<h2 id="插件的安装">插件的安装</h2>
<p>在 <code>~/.zshrc</code> 中的 <code>plugins=(...)</code> 中添加对应的插件名即可，上述插件，唯有 z.lua 需要安装。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~
curl -R -O http://www.lua.org/ftp/lua-5.4.0.tar.gz
tar zxf lua-5.4.0.tar.gz
<span class="nb">cd</span> lua-5.4.0
make
sudo make install
lua -v
rm -rf lua-5.4.0
git clone https://github.com/skywind3000/z.lua.git ~/.oh-my-zsh/custom/plugins/z.lua
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">plugins</span><span class="o">=(</span>
    alias-finder
    battery
    bbedit
    bower
    branch
    brew
    colored-man-pages
    colorize
    command-not-found
    common-aliases
    dash
    docker
    docker-compose
    emoji
    extract
    fancy-ctrl-z
    forklift
    fzf
    git
    git-auto-fetch
    git-prompt
    gitfast
    github
    gitignore
    golang
    gradle
    gulp
    <span class="nb">history</span>
    iterm2
    jenv
    jsontools
    mvn
    node
    npm
    npx
    nvm
    osx
    pip
    pipenv
    pyenv
    python
    rails
    rbenv
    redis-cli
    rvm
    shell-proxy
    spring
    sudo
    systemd
    textastic
    themes
    timer
    ubuntu
    ufw
    urltools
    vscode
    web-search
    yarn
    yum
    z.lua
    zsh-navigation-tools
<span class="o">)</span>
<span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>lua ~/.oh-my-zsh/custom/plugins/z.lua/z.lua  --init zsh once enhanced<span class="k">)</span><span class="s2">&#34;</span>    <span class="c1"># ZSH 初始化</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>关于 Unix 中的配置文件</title>
    <link>https://jonnyhub.gitee.io/2020/08/2020-06-08-%E5%85%B3%E4%BA%8Eunix%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
    <pubDate>Sat, 08 Aug 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://jonnyhub.gitee.io/2020/08/2020-06-08-%E5%85%B3%E4%BA%8Eunix%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
    <description><![CDATA[<blockquote>
<p>关于 Unix ，配置文件十分重要，对于用户来说，总是会搞不清，到底要设置哪里。下面就针对不同系统的文件做详细介绍。</p>
</blockquote>
<hr>
<h1 id="关于-unix-中的配置文件">关于 Unix 中的配置文件</h1>
<h2 id="linux-shell-种类简单介绍">Linux Shell 种类简单介绍</h2>
<p>Unix shell，一种壳层与命令行界面，是Unix操作系统下传统的用户和计算机的交互界面。</p>
<ul>
<li>查看本机 shell 有哪些，可以使用命令： <code>cat /etc/shells</code></li>
<li>查看当前用户正在使用的 shell 可以使用命令： <code>echo $SHELL # 切换 shell 为 zsh</code></li>
<li>切换当前用户的 shell 可以使用命令： <code>chsh -s /bin/zsh # 切换 shell 为 zsh</code></li>
</ul>
<h2 id="linux-的变量种类">Linux 的变量种类</h2>
<h3 id="按变量的生存周期划分">按变量的生存周期划分</h3>
<ul>
<li><strong>永久的：</strong> 需要修改配置文件，变量永久生效。</li>
<li><strong>临时的：</strong> 使用 <code>export</code> 命令声明即可，变量在关闭 shell 时失效。</li>
<li>在配置永久的环境变量时，又可以按照作用范围分为: <strong>用户环境变量</strong> &amp; <strong>系统环境变量</strong>。</li>
</ul>
<h2 id="设置环境变量">设置环境变量</h2>
<ol>
<li>
<p>在 shell 的命令行下直接使用 <code>[export 变量名=变量值]</code> 定义变量。该变量只在当前的 shell(bash) 或其子 shell(bash) 下是有效的，shell 关闭了，变量也就失效了，再打开新 shell 时就没有这个变量，需要使用的话还需要重新定义。</p>
</li>
<li>
<p>修改系统环境变量。系统环境变量一般保存在以下几个位置：</p>
<ul>
<li><code>/etc/profile</code> : 全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</li>
<li><code>/etc/bash.bashrc</code> : 它也是全局（公有）的 bash执行时，不管是何种方式，都会读取此文件。</li>
<li><code>/etc/environment</code> : 不要轻易修改此文件。</li>
</ul>
</li>
<li>
<p>修改用户环境变量。用户环境变量一般保存在以下几个位置：</p>
<ul>
<li><code>~/.profile</code></li>
<li><code>~/.bash_profile</code> 或者 <code>~./bash_login</code></li>
<li><code>~/.bashrc</code> : 推荐放置个人设置。</li>
<li><code>~/.bash_profile</code></li>
</ul>
</li>
<li>
<p>Linux 配置环境变量的几个文件的加载顺序：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"> /etc/profile -&gt; <span class="o">(</span>~/.bash_profile <span class="p">|</span> ~/.bash_login <span class="p">|</span> ~/.profile<span class="o">)</span> -&gt; ~/.bashrc -&gt; /etc/bashrc -&gt; ~/.bash_logout
</code></pre></td></tr></table>
</div>
</div><p><strong>说明：</strong></p>
<ul>
<li>若bash是以login方式执行时，读取~/.bash_profile，若它不存在，则读取~/.bash_login，若前两者不存在，读取~/.profile。</li>
<li>若bash是以login方式执行时，读取~/.bash_profile，若它不存,则读取~/.bash_login，若前两者不存在，读取 ~/.profile。只有bash是以login形式执行时，才会读取.bash_profile，Unbutu默认没有此文件，可新建。 通常该配置文件还会配置成去读取~/.bashrc。</li>
<li>当bash是以non-login形式执行时，读取此文件。若是以login形式执行，则不会读取此文件。</li>
<li>~/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。</li>
</ul>
</li>
</ol>
<p><a href="https://img-blog.csdn.net/20180614131117463?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZmVuNDIzNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener noreffer">读取流程图</a></p>
<h2 id="bashrc-和-bash_profile-的区别"><code>.bashrc</code> 和 <code>.bash_profile</code> 的区别</h2>
<p><code>.bash_profile</code>会用在登陆 shell， <code>.bashrc</code> 使用在交互式非登陆 shell 。
简单说来，它们的区别主要是: <code>.bash_profile</code>是在你每次登录的时候执行的；<code>.bashrc</code>是在你新开了一个命令行窗口时执行的。
当通过控制台进行登录（输入用户名和密码）：在初始化命令行提示符的时候会执行<code>.bash_profile</code> 来配置你的 shell 环境。但是如果已经登录到机器，在Gnome或者是KDE也开了一个新的终端窗口（xterm），这时，<code>.bashrc</code>会在窗口命令行提示符出现前被执行。当你在终端敲入<code>/bin/bash</code>时<code>.bashrc</code>也会在这个新的 bash 实例启动的时候执行。</p>
<h2 id="zshrc-文件是什么"><code>.zshrc</code> 文件是什么</h2>
<p>对于使用 zsh shell 的用户来说，<code>.zshrc</code> 文件就相当于以上所讲的  <code>~/.bashrc</code> 和 <code>.bash_profile</code>。</p>]]></description>
</item><item>
    <title>Oneinstack 环境安装</title>
    <link>https://jonnyhub.gitee.io/2019/05/2019-05-11-oneinstack-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link>
    <pubDate>Sat, 11 May 2019 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://jonnyhub.gitee.io/2019/05/2019-05-11-oneinstack-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid>
    <description><![CDATA[<p><strong>OneinStack</strong> 是另一个非常优秀的 LNMP 一键安装脚本，这与 LNMP 功能类似，只不过 LNMP.org 的 LNMP 一键脚本一年才更新一次，PHP 7和Let’s Encrypt证书只有等到 LNMP 1.4 出来后才能使用，而 OneinStack 早就可以使用了。</p>
<h2 id="oneinstack-下载安装与升级">OneinStack 下载安装与升级</h2>
<ul>
<li>准备:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># CentOS</span>
yum -y install wget screen
<span class="c1"># Ubuntu</span>
apt-get -y install wget screen
</code></pre></td></tr></table>
</div>
</div><p>screen 是为了防止链接断开而导致安装失败的问题
常用命令:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">
</code></pre></td></tr></table>
</div>
</div><ul>
<li>下载安装:
解压即可使用，推荐在 <code>~</code> 目录下。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~ <span class="o">&amp;&amp;</span> wget http://mirrors.linuxeye.com/oneinstack-full.tar.gz
tar xzf oneinstack-full.tar.gz
<span class="nb">cd</span> ~ <span class="o">&amp;&amp;</span> rm -rf oneinstack-full.tar.gz
</code></pre></td></tr></table>
</div>
</div><ul>
<li>升级:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~ <span class="o">&amp;&amp;</span> rm -rf oneinstack
重复安装步骤即可
</code></pre></td></tr></table>
</div>
</div><ul>
<li>其他配置</li>
</ul>
<h2 id="如何使用-oneinstack">如何使用 OneinStack</h2>
<h3 id="参考链接">参考链接</h3>
<ul>
<li>自动安装: <a href="https://oneinstack.com/auto/">https://oneinstack.com/auto/</a></li>
<li>交互安装: <a href="https://oneinstack.com/install/">https://oneinstack.com/install/</a></li>
<li>常见问题: <a href="https://oneinstack.com/faq/">https://oneinstack.com/faq/</a></li>
</ul>
<h3 id="自用安装命令">自用安装命令</h3>
<p>先简单安装一个 Nginx ， 初始化环境，也当作测试使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 如果网路出现中断，可以执行命令`screen -R ones`重新连接安装窗口</span>
screen -S ones
<span class="c1"># 这里选择的是安装 openresty</span>
<span class="nb">cd</span> ~/oneinstack <span class="o">&amp;&amp;</span> ./install.sh --nginx_option <span class="m">3</span> 
<span class="c1"># 如果 Nginx 安装成功，执行下面安装所有环境</span>
<span class="c1"># 需要注意修改 --dbrootpwd 参数 默认是 oneinstack </span>
<span class="nb">cd</span> ~ <span class="o">&amp;&amp;</span> ./oneinstack/install.sh --apache_option <span class="m">1</span> --apache_mpm_option <span class="m">1</span> --apache_mode_option <span class="m">1</span> --php_option <span class="m">8</span> --phpcache_option <span class="m">1</span> --php_extensions imagick,fileinfo,redis,memcached,mongodb  --pureftpd  --redis  --memcached --tomcat_option <span class="m">1</span> --jdk_option <span class="m">1</span> --phpmyadmin  --db_option <span class="m">1</span> --dbinstallmethod <span class="m">2</span> --dbrootpwd oneinstack --reboot

</code></pre></td></tr></table>
</div>
</div><h3 id="环境变量">环境变量</h3>
<p>将下方环境变量放入 <code>.zshrc</code> 中，执行 <code>source ~/.zshrc</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/java/jdk-11.0.7
<span class="nb">export</span> <span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/lib/tools.jar:<span class="nv">$JAVA_HOME</span>/lib/dt.jar:<span class="nv">$JAVA_HOME</span>/lib
<span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/bin:/usr/local/php/bin:/usr/local/apache/bin:/usr/local/mysql/bin:/usr/local/openresty/nginx/sbin:<span class="nv">$PATH</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Ubuntu 初始化记录</title>
    <link>https://jonnyhub.gitee.io/2019/02/2019-02-20-ubuntu-%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Wed, 20 Feb 2019 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://jonnyhub.gitee.io/2019/02/2019-02-20-ubuntu-%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[<p>使用腾讯云 CVM 安装了系统之后，需要做的一些基本设置与配置。</p>
<h2 id="系统更新与优化">系统更新与优化</h2>
<blockquote>
<p>本文默认: 在开启 root 登录后，一切使用 root 用户操作。</p>
</blockquote>
<h3 id="开启--root-登录">开启  root 登录</h3>
<p>默认可登录帐户名是: ubuntu(密码可以使用 key，或者安装时设定)， 为了使用 root 需要开启。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 我使用 key 登录，先修改 ubuntu 密码</span>
sudo passwd ubuntu
<span class="c1"># 修改 root ，可以与 ubuntu 一样</span>
sudo passwd root

<span class="c1"># 修改 ssh 配置  末尾添加: PermitRootLogin yes</span>
sudo vim /etc/ssh/sshd_config
PermitRootLogin yes
<span class="c1"># PasswordAuthentication yes 修改这个参数 no 改为 yes 是为了使用密码可以登录，默认只能使用 ssh-key</span>
sudo service ssh restart
<span class="c1"># 然后使用 root 用户登录即可，如果无法使用 ssh-key 登录，可以使用以下命令(确保本地已生成 ssh-key):</span>
<span class="c1"># 本地使用，非服务器</span>
ssh-copy-id -i ~/.ssh/id_rsa user@host
<span class="c1"># 附上生成 ssh-key 的命令，建议一路回车即可</span>
ssh-keygen -t rsa -b <span class="m">4096</span> -C <span class="s2">&#34;user@163.com&#34;</span>
ssh-copy-id -i ~/.ssh/id_rsa root@150.109.108.7
</code></pre></td></tr></table>
</div>
</div><h3 id="更新系统安装常用软件">更新系统，安装常用软件。</h3>
<blockquote>
<p>使用 root 登录之后操作</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 更新系统</span>
apt-get -y update <span class="o">&amp;&amp;</span> apt-get -y upgrade
<span class="c1"># 安装常用软件</span>
apt-get -y install git vim zsh aptitude exuberant-ctags wget <span class="se">\
</span><span class="se"></span>    screen apt-transport-https ca-certificates curl <span class="se">\
</span><span class="se"></span>    software-properties-common openssh-server snap landscape-common fish <span class="se">\
</span><span class="se"></span>    build-essential debian-keyring gcc-4.1-doc <span class="se">\
</span><span class="se"></span>    lib64stdc++6 glibc-doc manpages-dev libstdc++6-4.1-doc <span class="se">\
</span><span class="se"></span>    bison ed gawk gcc libc6-dev make cmake
<span class="c1"># 安装 webhookd</span>
<span class="nb">echo</span> <span class="s2">&#34;deb http://packages.azlux.fr/debian/ buster main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/azlux.list
wget -qO - https://azlux.fr/repo.gpg.key <span class="p">|</span> sudo apt-key add -
sudo apt-get -y install webhookd

<span class="c1"># 下载 OneinStack 并解压</span>
<span class="nb">cd</span> ~ <span class="o">&amp;&amp;</span> wget http://mirrors.linuxeye.com/oneinstack-full.tar.gz <span class="o">&amp;&amp;</span> tar xzf oneinstack-full.tar.gz

<span class="c1"># 安装 GoLang</span>
sudo add-apt-repository ppa:longsleep/golang-backports
sudo apt-get -y update
sudo apt-get -y install golang-go

<span class="c1"># 安装 OhMyZsh</span>
sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="k">)</span><span class="s2">&#34;</span>

</code></pre></td></tr></table>
</div>
</div><h3 id="配置--ohmyzsh">配置  OhMyZsh</h3>
<ul>
<li>zshrc 文件:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/bin:/usr/local/bin:<span class="nv">$PATH</span>
<span class="nb">export</span> <span class="nv">ZSH</span><span class="o">=</span><span class="s2">&#34;/root/.oh-my-zsh&#34;</span>
<span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&#34;robbyrussell&#34;</span>
<span class="nv">plugins</span><span class="o">=(</span>
    z git mvn npm nvm ubuntu github docker docker-compose git-auto-fetch alias-tips
    zsh-autosuggestions zsh-syntax-highlighting zsh-completions
<span class="o">)</span>
<span class="nb">source</span> <span class="nv">$ZSH</span>/oh-my-zsh.sh
<span class="c1"># User configuration</span>
<span class="nb">export</span> <span class="nv">MANPATH</span><span class="o">=</span><span class="s2">&#34;/usr/local/man:</span><span class="nv">$MANPATH</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
<span class="o">[[</span> -e ~/.profile <span class="o">]]</span> <span class="o">&amp;&amp;</span> emulate sh -c <span class="s1">&#39;source ~/.profile&#39;</span>
<span class="c1"># Compilation flags</span>
<span class="nb">export</span> <span class="nv">ARCHFLAGS</span><span class="o">=</span><span class="s2">&#34;-arch x86_64&#34;</span>
<span class="c1"># Set personal aliases</span>
<span class="nb">alias</span> <span class="nv">zshconfig</span><span class="o">=</span><span class="s2">&#34;vim ~/.zshrc&#34;</span>
<span class="nb">alias</span> <span class="nv">zshsource</span><span class="o">=</span><span class="s2">&#34;source ~/.oh-my-zsh&#34;</span>
<span class="nb">alias</span> <span class="nv">rm</span><span class="o">=</span><span class="s2">&#34;rm -r&#34;</span>
<span class="nb">alias</span> <span class="nv">cp</span><span class="o">=</span><span class="s2">&#34;cp -f&#34;</span>
<span class="nb">alias</span> <span class="nv">mv</span><span class="o">=</span><span class="s2">&#34;mv -f&#34;</span>
<span class="c1"># nvm</span>
<span class="nb">export</span> <span class="nv">NVM_DIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.nvm&#34;</span>
<span class="o">[</span> -s <span class="s2">&#34;</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&#34;</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh&#34;</span>  <span class="c1"># This loads nvm</span>
<span class="o">[</span> -s <span class="s2">&#34;</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&#34;</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion&#34;</span>  <span class="c1"># This loads nvm bash_completion</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>安装插件</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">git clone https://github.com/zsh-users/zsh-autosuggestions <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-completions <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="p">:=~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-completions
git clone https://github.com/djui/alias-tips <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="p">:=~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/alias-tips
git clone https://github.com/zsh-users/zsh-syntax-highlighting <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="p">:=~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-syntax-highlighting
<span class="nb">source</span> ~/.zshrc
</code></pre></td></tr></table>
</div>
</div><h3 id="安装-npm--nvm">安装 npm &amp; nvm</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 安装nvm</span>
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh <span class="p">|</span> bash
sudo tee ~/.profile <span class="s">&lt;&lt;-&#39;EOF&#39;
</span><span class="s">export NVM_DIR=&#34;$HOME/.nvm&#34;
</span><span class="s">[ -s &#34;$NVM_DIR/nvm.sh&#34; ] &amp;&amp; . &#34;$NVM_DIR/nvm.sh&#34; # This loads nvm
</span><span class="s">EOF</span>
sudo tee ~/.zshrc <span class="s">&lt;&lt;-&#39;EOF&#39;
</span><span class="s">export NVM_DIR=&#34;$HOME/.nvm&#34;
</span><span class="s">[ -s &#34;$NVM_DIR/nvm.sh&#34; ] &amp;&amp; \. &#34;$NVM_DIR/nvm.sh&#34;  # This loads nvm
</span><span class="s">[ -s &#34;$NVM_DIR/bash_completion&#34; ] &amp;&amp; \. &#34;$NVM_DIR/bash_completion&#34;  # This loads nvm bash_completion
</span><span class="s">EOF</span>
<span class="nb">source</span> ~/.zhsrc
<span class="c1"># 安装 Node 和 最新版 npm</span>
nvm install --lts
nvm use --lts
nvm install-latest-npm
<span class="c1"># 配置 cnpm [[ 仅国内机房使用 ]]</span>
npm install -g cnpm --registry<span class="o">=</span>https://registry.npm.taobao.org
</code></pre></td></tr></table>
</div>
</div><h3 id="配置-中文环境">配置 中文环境</h3>
<p>设置命令(root):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">dpkg-reconfigure locales
<span class="c1"># 第一步:选择所有 zh_CN 开头的</span>
<span class="c1"># 第二步: 选择 zh_CN.UTF-8</span>
</code></pre></td></tr></table>
</div>
</div><p>配置:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 注释原有的内容</span>
sed <span class="s1">&#39;s/^/#&amp;/g&#39;</span> /etc/default/locale
<span class="c1"># 修改 /etc/default/locale [配置中文]</span>
cat &gt;&gt;/etc/default/locale<span class="s">&lt;&lt;EOF
</span><span class="s">LANG=&#34;zh_CN.UTF-8&#34;
</span><span class="s">LANGUAGE=&#34;zh_CN:zh&#34;
</span><span class="s">LC_NUMERIC=&#34;zh_CN&#34;
</span><span class="s">LC_TIME=&#34;zh_CN&#34;
</span><span class="s">LC_MONETARY=&#34;zh_CN&#34;
</span><span class="s">LC_PAPER=&#34;zh_CN&#34;
</span><span class="s">LC_NAME=&#34;zh_CN&#34;
</span><span class="s">LC_ADDRESS=&#34;zh_CN&#34;
</span><span class="s">LC_TELEPHONE=&#34;zh_CN&#34;
</span><span class="s">LC_MEASUREMENT=&#34;zh_CN&#34;
</span><span class="s">LC_IDENTIFICATION=&#34;zh_CN&#34;
</span><span class="s">LC_ALL=&#34;zh_CN.UTF-8&#34;
</span><span class="s">EOF</span>
<span class="c1"># 不修改原有内容！ [配置中文]</span>
cat &gt;&gt;/etc/environment<span class="s">&lt;&lt;EOF
</span><span class="s">LANG=&#34;zh_CN.UTF-8&#34;
</span><span class="s">LANGUAGE=&#34;zh_CN:zh&#34;
</span><span class="s">LC_NUMERIC=&#34;zh_CN&#34;
</span><span class="s">LC_TIME=&#34;zh_CN&#34;
</span><span class="s">LC_MONETARY=&#34;zh_CN&#34;
</span><span class="s">LC_PAPER=&#34;zh_CN&#34;
</span><span class="s">LC_NAME=&#34;zh_CN&#34;
</span><span class="s">LC_ADDRESS=&#34;zh_CN&#34;
</span><span class="s">LC_TELEPHONE=&#34;zh_CN&#34;
</span><span class="s">LC_MEASUREMENT=&#34;zh_CN&#34;
</span><span class="s">LC_IDENTIFICATION=&#34;zh_CN&#34;
</span><span class="s">LC_ALL=&#34;zh_CN.UTF-8&#34;
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="修改登录界面">修改登录界面:</h3>
<p>去除一些臃肿的信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mv /etc/update-motd.d/50-motd-news /etc/update-motd.d/50-motd-news.bak
mv /etc/update-motd.d/80-livepatch /etc/update-motd.d/80-livepatch.bak
mv /etc/update-motd.d/10-help-text /etc/update-motd.d/10-help-text.bak

</code></pre></td></tr></table>
</div>
</div><p>添加登录图画，可自定义</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo tee /etc/motd <span class="s">&lt;&lt;-&#39;EOF&#39;
</span><span class="s">       dP
</span><span class="s">       88
</span><span class="s">       88 .d8888b. 88d888b. 88d888b. dP    dP
</span><span class="s">       88 88&#39;  `88 88&#39;  `88 88&#39;  `88 88    88
</span><span class="s">88.  .d8P 88.  .88 88    88 88    88 88.  .88
</span><span class="s"> `Y8888&#39;  `88888P&#39; dP    dP dP    dP `8888P88
</span><span class="s">oooooooooooooooooooooooooooooooooooooo~~~~.88~
</span><span class="s">                                      d8888P
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="webhookd-配置">webhookd 配置</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-service" data-lang="service"><span class="k">[Unit]</span>
<span class="na">Description</span><span class="o">=</span><span class="s">WEBHOOKD</span>

<span class="k">[Service]</span>
<span class="na">ExecStart</span><span class="o">=</span><span class="s">webhookd</span>
<span class="na">User</span><span class="o">=</span><span class="s">webhookd</span>
<span class="na">Group</span><span class="o">=</span><span class="s">webhookd</span>
<span class="na">EnvironmentFile</span><span class="o">=</span><span class="s">-/etc/default/webhookd.env</span>
<span class="na">EnvironmentFile</span><span class="o">=</span><span class="s">-/etc/webhookd.env</span>
<span class="na">Restart</span><span class="o">=</span><span class="s">always</span>
<span class="na">Type</span><span class="o">=</span><span class="s">simple</span>
<span class="na">RestartSec</span><span class="o">=</span><span class="s">30s</span>

<span class="k">[Install]</span>
<span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">
<span class="c1"># 安装 nodejs &amp; nvm</span>
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh <span class="p">|</span> bash
sudo tee ~/.profile <span class="s">&lt;&lt;-&#39;EOF&#39;
</span><span class="s">export NVM_DIR=&#34;$HOME/.nvm&#34;
</span><span class="s">[ -s &#34;$NVM_DIR/nvm.sh&#34; ] &amp;&amp; . &#34;$NVM_DIR/nvm.sh&#34; # This loads nvm
</span><span class="s">EOF</span>
<span class="nb">source</span> ~/.profile
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
